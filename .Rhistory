install.packages("neuralnet")
library("neuralnet", lib.loc="~/R/win-library/3.1")
citation()
?pairwise.t.test
?read.csv
?max
temp <- data.frame(Scenario = numeric(numRuns))
temp <- data.frame(Scenario = numeric(5))
temp.Names
temp.Names()
colnames(temp, c("Scenario1"))
View(temp)
colnames(temp, "Scenario1")
temp <- data.frame(Run = numeric(5), Scenario = numeric(5))
colnames(temp, c("Run1", "Scenario1"))
colnames(temp) <- c("Run1", "Scenario1"))
colnames(temp) <- c("Run1", "Scenario1")
View(temp)
colnames(temp) <- c("Run_ed", "Scenario1")
View(temp)
col1Name <- "Run_it_all"
colnames(temp) <- c(col1Name, "Scenario2")
View(temp)
colnames(temp) <- col1Name
View(temp)
temp <- data.frame(Scenario = numeric(5))
colnames(temp) <- col1Name
?arrows
plot(NA, xlim = c(0,6), ylim = c(-2, 3), lwd = 3)
vecs <- data.frame(vname = c("a1","a2","a3","c"), a1 = c(0,0,1,1), a2 = c(0,0,0,2), a3 = c(0,0,-1,4), c = (0,0,-1,5), col = c(1,1,1,2))
with( vecs, mapply("arrows", a1, a2, a3,c,col=col,lwd=3) )
vecs <- data.frame(vname = c("a1","a2","a3","c"), a1 = c(0,0,1,1), a2 = c(0,0,0,2), a3 = c(0,0,-1,4), cvect = c(0,0,-1,5), col = c(1,1,1,2))
with( vecs, mapply("arrows", a1, a2, a3,c,col=col,lwd=3) )
plot(NA, xlim = c(-2,3), ylim = c(0, 6), lwd = 3)
vecs <- data.frame(vname = c("a1","a2","a3","c"), a1 = c(0,0,1,1), a2 = c(0,0,0,2), a3 = c(0,0,-1,4), cvect = c(0,0,-1,5), col = c(1,1,1,2))
with( vecs, mapply("arrows", a1, a2, a3,c,col=col,lwd=3) )
with( vecs, mapply("arrows", a1, a2, a3,c,col=c(1,1,1,2),lwd=3) )
with( vecs, mapply("arrows", a1, a2, a3,c)#,col=c(1,1,1,2),lwd=3) )
with( vecs, mapply("arrows", a1, a2, a3,cvect)#,col=c(1,1,1,2),lwd=3) )
with( vecs, mapply("arrows", a1, a2, a3,cvect))#,col=c(1,1,1,2),lwd=3) )
vecs <- data.frame(vname = c("a1","a2","a3","c"), x0 = c(0,0,0,0,0,0,0,0), y0 = c(0,0,0,0,0,0,0,0), x1 = c(1,0,-1,-1), y1 = c(1,2,4,5), col = c(1,1,1,2))
with( vecs, mapply("arrows", a1, a2, a3,cvect))#,col=c(1,1,1,2),lwd=3) )
vecs <- data.frame(vname = c("a1","a2","a3","c"), x0 = c(0,0,0,0), y0 = c(0,0,0,0), x1 = c(1,0,-1,-1), y1 = c(1,2,4,5), col = c(1,1,1,2))
with( vecs, mapply("arrows", x0, y0, x1, y1))#,col=c(1,1,1,2),lwd=3) )
plot(NA, xlim = c(-2,3), ylim = c(0, 6), lwd = 3)
vecs <- data.frame(vname = c("a1","a2","a3","c"), x0 = c(0,0,0,0), y0 = c(0,0,0,0), x1 = c(1,0,-1,-1), y1 = c(1,2,4,5), col = c(1,1,1,2))
with( vecs, mapply("arrows", x0, y0, x1, y1))#,col=c(1,1,1,2),lwd=3) )
plot(NA, xlim = c(-2,3), ylim = c(0, 6), lwd = 3)
vecs <- data.frame(vname = c("a1","a2","a3","c"), x0 = c(0,0,0,0), y0 = c(0,0,0,0), x1 = c(1,0,-1,-1), y1 = c(1,2,4,5), col = c(1,1,1,2))
with( vecs, mapply("arrows", x0, y0, x1, y1,col=c(1,1,1,2),lwd=3) )
with(vecs, mapply('text', x=x1[1:4]-.1, y=y1[1:4]+.1, labels=expression(list(a[1]), list(a[2]), list(a[2]), list(c) ) ))
with(vecs, mapply('text', x=x1[1:4]+.1, y=y1[1:4]+.1, labels=expression(list(a[1]), list(a[2]), list(a[2]), list(c) ) ))
plot(NA, xlim = c(-2,3), ylim = c(0, 6), lwd = 3)
vecs <- data.frame(vname = c("a1","a2","a3","c"), x0 = c(0,0,0,0), y0 = c(0,0,0,0), x1 = c(1,0,-1,-1), y1 = c(1,2,4,5), col = c(1,1,1,2))
with( vecs, mapply("arrows", x0, y0, x1, y1,col=c(1,1,1,2),lwd=3) )
with(vecs, mapply('text', x=x1[1:4]+.1, y=y1[1:4]+.1, labels=expression(list(a[1]), list(a[2]), list(a[2]), list(c) ) ))
plot(NA, xlim = c(-2,3), ylim = c(0, 6), xlab = NA, ylab = NA, lwd = 3)
vecs <- data.frame(vname = c("a1","a2","a3","c"), x0 = c(0,0,0,0), y0 = c(0,0,0,0), x1 = c(1,0,-1,-1), y1 = c(1,2,4,5), col = c(1,1,1,2))
with( vecs, mapply("arrows", x0, y0, x1, y1,col=c(1,1,1,2),lwd=3) )
with(vecs, mapply('text', x=x1[1:4]+.1, y=y1[1:4]+.1, labels=expression(list(a[1]), list(a[2]), list(a[2]), list(c) ) ))
with(vecs, mapply('text', x=x1[1:4]+.1, y=y1[1:4]+.1, labels=expression(list(a[1]), list(a[2]), list(a[3]), list(c) ) ))
plot(NA, xlim = c(-2,3), ylim = c(0, 6), xlab = NA, ylab = NA, lwd = 3)
vecs <- data.frame(vname = c("a1","a2","a3","c"), x0 = c(0,0,0,0), y0 = c(0,0,0,0), x1 = c(1,0,-1,-1), y1 = c(1,2,4,5), col = c(1,1,1,2))
with( vecs, mapply("arrows", x0, y0, x1, y1,col=c(1,1,1,2),lwd=3) )
with(vecs, mapply('text', x=x1[1:4]+.1, y=y1[1:4]+.1, labels=expression(list(a[1]), list(a[2]), list(a[3]), list(c) ) ))
?plotmath
plot(NA, xlim = c(-2,3), ylim = c(0, 6), xlab = NA, ylab = NA, lwd = 3)
vecs <- data.frame(vname = c("a1","a2","a3","c"), x0 = c(0,0,0,0), y0 = c(0,0,0,0), x1 = c(1,0,-1,-1), y1 = c(1,2,4,5), col = c(1,1,1,2))
with( vecs, mapply("arrows", x0, y0, x1, y1,col=c(3,3,3,2),lwd=3) )
with(vecs, mapply('text', x=x1[1:4]+.1, y=y1[1:4]+.1, labels=expression(a^1, a^2, a^3, c ) ))
plot(NA, xlim = c(-2,3), ylim = c(0, 6), xlab = NA, ylab = NA, lwd = 3)
vecs <- data.frame(vname = c("a1","a2","a3","c"), x0 = c(0,0,0,0), y0 = c(0,0,0,0), x1 = c(1,0,-1,-1), y1 = c(1,2,4,5), col = c(1,1,1,2))
with( vecs, mapply("arrows", x0, y0, x1, y1,col=c(3,3,3,2),lwd=3) )
with(vecs, mapply('text', x=x1[1:4]-.1, y=y1[1:4]+.2, labels=expression(a^1, a^2, a^3, c ) ))
2+2
require(graphics)
summary(fm1 <- aov(breaks ~ wool + tension, data = warpbreaks))
TukeyHSD(fm1, "tension", ordered = TRUE)
plot(TukeyHSD(fm1, "tension"))
install.packages("slidify")
install.packages("slidify")
install.packages("KernSmooth")
library(KernSmooth)
install.packages("xtable")
setwd("~/ORSA STUFF/Johns Hopkins Data Science Specialty/Practical Machine Learning/Course Project/Repository")
library(caret)
training <- read.csv("data/pml-training.csv")
testing <- read.csv("data/pml-testing.csv")
str(training)
str(training$classe)
View(training)
training[,160]
M <- abs(cor(training[,-160]))
training$kurtosis_roll_belt
hist(training$classe)
mean(training)
rowmeans(training)
training <- read.csv("data/pml-training.csv", stringsAsFactors = FALSE)
training <- read.csv("data/pml-training.csv", stringsAsFactors = FALSE)
testing <- read.csv("data/pml-testing.csv", stringsAsFactors = FALSE)
str(training)
str(training$classe)
mean(training)
?mean
rowMeans(training, na.rm = TRUE)
training <- read.csv("data/pml-training.csv")#, stringsAsFactors = FALSE)
testing <- read.csv("data/pml-testing.csv")#, stringsAsFactors = FALSE)
str(training)
str(training$classe)
training$cvtd_timestamp <- as.Date(training$cvtd_timestamp)
str(training)
View(training)
View(training)
training <- read.csv("data/pml-training.csv")#, stringsAsFactors = FALSE)
testing <- read.csv("data/pml-testing.csv")#, stringsAsFactors = FALSE)
training[,8:159] <- as.numeric(training[,8:159])
training$kurtosis_roll_belt <- as.numeric(training$kurtosis_roll_belt)
str(training)
View(training)
preProcTrng <- preProcess(training, method = "knnImpute")
trngImputed <- predict(trainingImp, training)
trngImputed <- predict(preProcTrng, training)
View(trngImputed)
trngImputed$classe
hist(training$classe)
training <- read.csv("data/pml-training.csv")#, stringsAsFactors = FALSE)
validation <- read.csv("data/pml-testing.csv")#, stringsAsFactors = FALSE)
str(training)
str(training$classe)
hist(training$classe)
data <- read.csv("data/pml-training.csv")#, stringsAsFactors = FALSE)
validation <- read.csv("data/pml-testing.csv")#, stringsAsFactors = FALSE)
str(data)
str(training$classe)
library(caret)
nsv <- nearZeroVar(data, saveMetrics = TRUE)
nsv
nsv <- nearZeroVar(data)
nsv <- nearZeroVar(data)
``
nzVar <- nearZeroVar(data, saveMetrics = TRUE)
nzVar <- nearZeroVar(data, saveMetrics = TRUE)
nzVar
nzvCols <- nearZeroVar(data)
dim(data)
if(nzvCols > 0) dataRed <- data[, -nzvCols]
dim(dataRed)
if(length(nzvCols) > 0) dataRed <- data[, -nzvCols]
dim(dataRed)
View(dataRed)
View(validation)
if(length(nzvCols) > 0) validRed <- validation[,-nzvCols]
dim(validRed)
mean(is.na(dataRed))
mean(is.na(dataRed$max_roll_belt))
mostlyMiss <- sapply(dataRed, function(x) mean(is.na(x)))
mostlyMiss
cutoff <- 0.95 #Percent of the variable that is missing - can change this to be less inclusive
mostlyMiss <- sapply(dataRed, function(x) mean(is.na(x))) > cutoff
mostlyMiss
dataRed <- dataRed[, -mostlyMiss]
validRed <- validRed[, -mostlyMiss]
dataRed <- dataRed[, -mostlyMiss]
View(dataRed)
nzvCols <- nearZeroVar(data)
nzvCols <- nearZeroVar(data)
if(length(nzvCols) > 0) dataRed <- data[, -nzvCols]
if(length(nzvCols) > 0) dataRed <- data[, -nzvCols]
if(length(nzvCols) > 0) validRed <- validation[,-nzvCols]
dim(dataRed)
dim(dataRed)
dim(validRed)
cutoff <- 0.95 #Percent of the variable that is missing - can change this to be less inclusive
dataRed <- dataRed[, mostlyMiss == FALSE]
dataRed <- dataRed[, mostlyMiss == FALSE]
dataRed <- dataRed[, mostlyMiss == FALSE]
validRed <- validRed[, mostlyMiss == FALSE]
dim(dataRed)
dim(validRed)
View(dataRed)
dataRed <- dataRed[,-1]
View(dataRed)
validRed <- validRed[,-1]
percMiss <- sapply(dataRed, function(x) mean(is.na(x)))
percMiss
M <- abs(cor(dataRed[,-58])) #Column 58 contains the response variable, classe.
table(dataRed$user_name)
dummies <- dummyVars(classe ~ user_name, data = dataRed)
head(predict(dummies, newdata = dataRed))
dataRedDummies <- predict(dummies, newdata = dataRed)
View(dataRedDummies)
View(dataRed)
dataRed2 <- data.frame(dataRedDummies, dataRed[,-1])
View(dataRed2)
M <- abs(cor(dataRed2[,-c(4,58)])) #Column 58 contains the response variable, classe. Column 4 is a date variable.
str(dataRed2)
str(as.numeric(dataRed2))
str(as.numeric(dataRed2[,-c(4,58)]))
sapply(dataRed2[,-c(4,58)], as.numeric)
str(sapply(dataRed2[,-c(4,58)], as.numeric))
str(data.frame(sapply(dataRed2[,-c(4,58)], as.numeric)))
check <- dataRed2[, -c(4,58)]
View(check)
check <- dataRed2[, -c(9,63)] #Column 63 contains the response variable, classe. Column 9 is a date variable.
M <- abs(cor(data.frame(sapply(check, as.numeric))))
diag(M) <- 0
which(M > 0.8,arr.ind=T)
M
M <- abs(cor(data.frame(sapply(check, as.numeric))))
diag(M) <- 0
which(M > 0.9,arr.ind=T)
set.seed(3323)
inTrain <- createDataPartition(y = dataRed2$classe, p = 0.60, list=FALSE)
training <- dataRed2[inTrain,]
testing <- dataRed2[-inTrain,]
dim(training)
head(predict(dummies, newdata = validRed))
View(validRed)
View(dataRed)
View(validation)
str(validation$classe)
View(data)
names(validation) %in% names(data)
validation[,160]
names(validation[,160])
names(data[,160])
names(data)[160]
names(validation)[160]
set.seed(3323)
#Split the dataRed data frame as it matches the validation data set.
inTrain <- createDataPartition(y = dataRed$classe, p = 0.60, list=FALSE)
training <- dataRed[inTrain,]
testing <- dataRed[-inTrain,]
dim(training)
cvCtrlTime <- trainControl(method = "timeslice", initialWindow = 10, horizon = 1, fixedWindow = FALSE) #Will conduct time slice cross-validation on the next sample, growing the sample from an initial size of 10, always starting and 1.
#Cross-validation control to check to see if a model not using time slice cross-validation will give just as good results
cvCtrlKfold <- trainControl(method = "repeatedcv", repeats = 3) #will conduct a 10-fold repeated cross-validation three times.
modLDA <- train(classe ~ ., data = training,
method = "lda",
trcontrol = cvCtrlTime)
modQDA <- train(classe ~ ., data = training,
method = "qda",
trcontrol = cvCtrlTime)
modQDA <- train(classe ~ ., data = training,
method = "qda",
trcontrol = cvCtrlKfold)
cvCtrlTime <- trainControl(method = "timeslice", initialWindow = 10, horizon = 1, fixedWindow = FALSE) #Will conduct time slice cross-validation on the next sample, growing the sample from an initial size of 10, always starting and 1.
#Cross-validation control to check to see if a model not using time slice cross-validation will give just as good results
cvCtrlKfold <- trainControl(method = "repeatedcv", repeats = 3) #will conduct a 10-fold repeated cross-validation three times.
modKNN <- train(classe ~ ., data = training,
method = "knn",
trcontrol = cvCtrlTime)
modKNN <- train(classe ~ ., data = training,
method = "knn",
trcontrol = cvCtrlKfold)
cvCtrl10Fold <- trainControl(method = "cv", number = 10)
modKNN <- train(classe ~ ., data = training,
method = "knn",
trcontrol = cvCtrl10Fold)
cvCtrl10Fold <- trainControl(method = "cv", number = 10)
modKNN <- train(classe ~ ., data = training,
method = "knn",
trcontrol = cvCtrl10Fold)
modKNN <- train(classe ~ ., data = training,
method = "knn",
trcontrol = ctrlKNN)
ctrlKNN <- trainControl(method = "adaptive_cv")
modKNN <- train(classe ~ ., data = training,
method = "knn",
trcontrol = ctrlKNN)
modKNN <- train(classe ~ ., data = training,
method = "knn" )#,
modKNN <- train(classe ~ ., data = training,
method = "knn",
trControl = ctrl10Fold)
cvCtrl10Fold <- trainControl(method = "cv", number = 10)
modKNN <- train(classe ~ ., data = training,
method = "knn",
trControl = cvCtrl10Fold)
modKNN2 <- train(classe ~ ., data = training,
method = "knn",
trControl = cvCtrlKfold)
modKNN3 <- train(classe ~ ., data = training,
method = "knn",
trControl = cvCtrlTime)
cmknn1 <- confusionMatrix(predict(modKNN,testing),testing$classe)
cmknn1
cmknn2 <- confusionMatrix(predict(modKNN2,testing),testing$classe)
cmknn2
cmknn3 <- confusionMatrix(predict(modKNN3,testing),testing$classe)
cmknn3
modRf <- train(classe ~ ., data = training,
method = "rf",
trControl = cvCtrl10Fold)
cmrf1 <- confusionMatrix(predict(modRf,testing),testing$classe)
cmrf1
modRf2 <- train(classe ~ ., data = training,
method = "rf",
trControl = cvCtrlKfold)
cmrf2 <- confusionMatrix(predict(modRf2,testing),testing$classe)
cmrf2
modRf3 <- train(classe ~ ., data = training,
method = "rf",
trControl = cvCtrlTime)
cmrf1 <- confusionMatrix(predict(modRf,testing),testing$classe)
cmrf1 <- confusionMatrix(predict(modRf,testing),testing$classe)
cmrf1
cmrf2 <- confusionMatrix(predict(modRf2,testing),testing$classe)
cmrf2
cmknn1 <- confusionMatrix(predict(modKNN,testing),testing$classe)
cmknn1
cmknn2 <- confusionMatrix(predict(modKNN2,testing),testing$classe)
cmknn2
cmknn3 <- confusionMatrix(predict(modKNN3,testing),testing$classe)
cmknn3 <- confusionMatrix(predict(modKNN3,testing),testing$classe)
cmknn3
outcome = which(names(dataRed) == "classe")
highCorrCols = findCorrelation(abs(cor(dataRed[,-outcome])),0.90)
View(dataRed)
highCorrCols = findCorrelation(abs(cor(dataRed[,-c(1,4,58)])),0.90)
highCorrFeatures = names(dataRed)[highCorrCols]
dataRed2 = dataRed[,-highCorrCols]
View(dataRed2)
outcome = which(names(dataRed2) == "classe")
validRed2 = validRed[,-highCorrCols]
set.seed(3323)
inTrain <- createDataPartition(y = dataRed2$classe, p = 0.60, list=FALSE)
training <- dataRed2[inTrain,]
testing <- dataRed2[-inTrain,]
dim(training)
modKNN <- train(classe ~ ., data = training,
method = "knn",
trControl = cvCtrl10Fold)
cmknnNonCorr <- confusionMatrix(predict(modKNN,testing),testing$classe)
cmknnNonCorr <- confusionMatrix(predict(modKNN,testing),testing$classe)
cmknnNonCorr
cmknn1
modRf <- train(classe ~ ., data = training,
method = "rf",
trControl = cvCtrl10Fold)
cmrfNonCorr <- confusionMatrix(predict(modRf,testing),testing$classe)
cmrfNonCorr
cmrf1
cmrf <- confusionMatrix(predict(modRf,testing),testing$classe)
cmrf
cmknn <- confusionMatrix(predict(modKNN,testing),testing$classe)
cmknn <- confusionMatrix(predict(modKNN,testing),testing$classe)
cmknn
View(validRed2)
answers <- predict(modRf, validRed2[,-51]) #Column 51 is the problem ID, we won't predict on that.
answers
answers <- data.frame(validRed2$problem_id, answers)
answers
rm(answers)
